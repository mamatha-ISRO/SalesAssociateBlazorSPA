@page "/"
@inject HttpClient client
@using Newtonsoft.Json.Converters;
@using System.Linq;
<PageTitle>Index</PageTitle>

<div class="me-0" >
    <h3 style="align-content:center"> ABC Automotive car dealer </h3>
    <img class="rounded" alt="Responsive image" src="/images/audi_car_image.jpg"/>
    </div>
<h3>Sales Associate  Calculator</h3>
<h7> Select dates of Sale Season </h7>

<div> 
<label for="start" class="col-form-label">From date: </label>  
           <input type="date" value=""/>

           <label for="end" class="col-form-label">To date: </label>  
           <input type="date" for="todate" id="saletodate" name="saletodate" value="" />
</div>
<div>
    <label for="carMake">Choose a Make:</label>
    <select id="carMake" @bind="selectedCarMake" class="form-select">
        <option value="">Select Car Make</option>
        @if (cars != null)
        {
            foreach (var make in cars.Select(c => c["make"].ToString()).Distinct())
            {
                <option value="@make">@make</option>
            }
        }
    </select>
</div>
       <div>
           <label for="model-select">Choose a Model:</label>
           <select id="carModel" @bind="selectedCarModel" class="form-select"  >
            <option value="">Select Car Model</option>
                 @if (!string.IsNullOrEmpty(selectedCarMake))
        {
            var distinctModels = cars
                .Where(car => car["make"].ToString().Equals(selectedCarMake, StringComparison.OrdinalIgnoreCase))
                .Select(car => car["model"].ToString())
                .Distinct();

            foreach (var model in distinctModels)
            {
                <option value="@model">@model</option>
            }
        }       
           </select>
       </div>
       <div>
           <label for="type-select">Choose a Type:</label>
           <select id="carType" @bind="selectedCarType" class="form-select" >
            <option value="">Select Car Type</option>
             @if (!string.IsNullOrEmpty(selectedCarModel))
        {
            var distinctTypes = cars
                .Where(car => (car["make"].ToString().Equals(selectedCarMake, StringComparison.OrdinalIgnoreCase)) && (car["model"].ToString().Equals(selectedCarModel, StringComparison.OrdinalIgnoreCase)) ) 
                .Select(car => car["carType"].ToString())
                .Distinct();

            foreach (var tpe in distinctTypes)
            {
                <option value="@tpe">@tpe</option>
            }
        }       
            
           </select>
       </div>
       <div>
           <label for="model-select">Choose a Color:</label>
           <select id="carColor" @bind="selectedCarColor" class="form-select" >
            <option value="">Select Car Color</option>
             @if (!string.IsNullOrEmpty(selectedCarModel))
        {
            var distinctColors = cars
                .Where(car => (car["make"].ToString().Equals(selectedCarMake, StringComparison.OrdinalIgnoreCase)) && (car["model"].ToString().Equals(selectedCarModel, StringComparison.OrdinalIgnoreCase)) && (car["carType"].ToString().Equals(selectedCarType, StringComparison.OrdinalIgnoreCase)) ) 
                .Select(car => car["color"].ToString())
                .Distinct();

            foreach (var clr in distinctColors)
            {
                <option value="@clr">@clr</option>
            }
        }       
            
           </select>
       </div>
       <div>
 <label for="currsale" class="col-form-label">Current sale date </label>  
           <input type="date" for="select_saleday" value="" name="reqSaledate" id="reqSaledate"/>
       </div>
        
       <div>
            <input type="button"  class="btn btn-primary" value="Calculate profit  and Commision" @onclick="CalcProfitNCommision"/>
       </div>
      
       <div name="profitndcommision" id="profitndcommision" >
           Profit of the Dealer in CAD: @dealerProfit
           Sales Associate Commision in CAD: @SACommision
           Sale price of the Car on the given date @reqSaledate in CAD : @SalepriceofCar

       </div>
       
@code{
    string selectedCarMake;
    string selectedCarModel;
    string selectedCarColor;
    string selectedCarType;
    string myJsonResponce;
    int numberofweeks;
    double dealerProfit;
    double SACommision;
    double SalepriceofCar;
    DateTime toSalePdate;
    DateTime fromsalePdate;
    DateTime reqSaledate;

    public List<string>carMakes=  new List<string>();
    public Newtonsoft.Json.Linq.JArray cars;

    protected async override void OnInitialized()
    {
        List<string> models = new List<string>();
        List<string> makes = new List<string>();
        List<string> colors = new List<string>();


        var responce = await client.GetAsync("api/car");
        var  myJsonResponce = await responce.Content.ReadAsStringAsync();
        var carResp = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(myJsonResponce);
        cars =Newtonsoft.Json.Linq.JArray.Parse(carResp.ToString());

        StateHasChanged(); 

    }


    private async void CalcProfitNCommision()
    {

        //  int DaysDifference = (reqSaledate.ToDateTime(TimeOnly.MinValue) - toSalePdate.ToDateTime(TimeOnly.MinValue)).Days;
        // int weeksDifference = DaysDifference / 7;
        var targetCar = cars
            .Where(c => c["make"].ToString() == selectedCarMake &&
                        c["model"].ToString() == selectedCarModel &&
                        c["carType"].ToString() == selectedCarType &&
                        c["color"].ToString() == selectedCarColor)
            .Select(c => new
            {
                Cost = c["cost"].ToString(),
                MSRP = c["msrp"].ToString()
            })
            .FirstOrDefault();

        if(!string.IsNullOrEmpty(selectedCarType)) 
        {
            switch (selectedCarType)
            {
                case "convertible":

                    dealerProfit =int.Parse(targetCar.MSRP) -int.Parse(targetCar.Cost);
                    SACommision = dealerProfit  * 0.125;
                    SalepriceofCar = int.Parse(targetCar.MSRP);
                    Console.WriteLine($"For the given Car on the given date, Sale Price is = {SalepriceofCar} CAD Sales Associate commisin : {SACommision} CAD  Profit to deater: {dealerProfit} CAD");
                    break;

                 case "SUV":


                 break;


                 default:

                  
                  break;
                 
                
            }
       

        }

    }


   
    }
       




